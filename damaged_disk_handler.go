package main

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"sync"
	"time"
)

// DamagedDiskConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–º–∏ –¥–∏—Å–∫–∞–º–∏
type DamagedDiskConfig struct {
	FileTimeout       time.Duration // –¢–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥)
	DamagedLogFile    string        // –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	SkipListFile      string        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
	RetryCount        int           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
	UseSkipList       bool          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö
	LogDetailedErrors bool          // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
	BufferSize        int           // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (–º–µ–Ω—å—à–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
	Quiet             bool          // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å)
}

// DamagedFileInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
type DamagedFileInfo struct {
	FilePath    string    `json:"filePath"`
	Reason      string    `json:"reason"`
	Timestamp   time.Time `json:"timestamp"`
	Size        int64     `json:"size"`
	AttemptNum  int       `json:"attemptNum"`
	ErrorDetail string    `json:"errorDetail,omitempty"`
}

// DamagedDiskHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
type DamagedDiskHandler struct {
	config      DamagedDiskConfig
	damagedFiles []DamagedFileInfo
	skipSet     map[string]bool
	persistedSkipSet map[string]bool
	mutex       sync.RWMutex
	workingDir  string

	// Session stats
	sessionSkippedCount int
	sessionLastSkipped  string
}

// NewDamagedDiskConfig —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
func NewDamagedDiskConfig() DamagedDiskConfig {
	// Allow override via environment variable (seconds)
	timeout := 10 * time.Second
	if v := os.Getenv("FILEDO_TIMEOUT_NOPROGRESS_SECONDS"); v != "" {
		if n, err := time.ParseDuration(v + "s"); err == nil && n > 0 {
			timeout = n
		}
	}
	return DamagedDiskConfig{
		FileTimeout:       timeout,
		DamagedLogFile:    "damaged_files.log",
		SkipListFile:      "skip_files.list",
		RetryCount:        1,
		UseSkipList:       true,
		LogDetailedErrors: true,
		BufferSize:        64 * 1024, // 64KB –±—É—Ñ–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		Quiet:             false,
	}
}

// global flag to avoid repeated prints about loaded skip list
var skipListLoadedPrinted bool

// NewDamagedDiskHandler —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
func NewDamagedDiskHandler() (*DamagedDiskHandler, error) {
	config := NewDamagedDiskConfig()
	
	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –∑–∞–ø—É—â–µ–Ω filedo.exe)
	workingDir, err := os.Getwd()
	if err != nil {
		workingDir = "." // fallback to current directory
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ –ª–æ–≥-—Ñ–∞–π–ª–∞–º
	config.DamagedLogFile = filepath.Join(workingDir, config.DamagedLogFile)
	config.SkipListFile = filepath.Join(workingDir, config.SkipListFile)
	
	handler := &DamagedDiskHandler{
		config:     config,
		skipSet:    make(map[string]bool),
	persistedSkipSet: make(map[string]bool),
		workingDir: workingDir,
	}
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
	if err := handler.loadSkipList(); err != nil {
		fmt.Printf("Warning: Could not load skip list: %v\n", err)
	}
	
	return handler, nil
}

// NewDamagedDiskHandlerQuiet —Å–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
func NewDamagedDiskHandlerQuiet() (*DamagedDiskHandler, error) {
	config := NewDamagedDiskConfig()
	config.Quiet = true

	workingDir, err := os.Getwd()
	if err != nil {
		workingDir = "."
	}
	config.DamagedLogFile = filepath.Join(workingDir, config.DamagedLogFile)
	config.SkipListFile = filepath.Join(workingDir, config.SkipListFile)

	handler := &DamagedDiskHandler{
		config:     config,
		skipSet:    make(map[string]bool),
		persistedSkipSet: make(map[string]bool),
		workingDir: workingDir,
	}
	if err := handler.loadSkipList(); err != nil && !config.Quiet {
		fmt.Printf("Warning: Could not load skip list: %v\n", err)
	}
	return handler, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
func (h *DamagedDiskHandler) Close() error {
	return h.saveSkipList()
}

// loadSkipList –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
func (h *DamagedDiskHandler) loadSkipList() error {
	if !h.config.UseSkipList {
		return nil
	}
	
	file, err := os.Open(h.config.SkipListFile)
	if os.IsNotExist(err) {
		return nil // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	}
	if err != nil {
		return err
	}
	defer file.Close()
	
	scanner := bufio.NewScanner(file)
	count := 0
	
	h.mutex.Lock()
	defer h.mutex.Unlock()
	
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" && !strings.HasPrefix(line, "#") {
			norm := h.normalizePath(line)
			h.skipSet[norm] = true
			h.persistedSkipSet[norm] = true
			count++
		}
	}
	
	if count > 0 && !h.config.Quiet && !skipListLoadedPrinted {
		fmt.Printf("üìã Loaded %d previously damaged files from skip list\n", count)
		skipListLoadedPrinted = true
	}
	
	return scanner.Err()
}

// saveSkipList —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª
func (h *DamagedDiskHandler) saveSkipList() error {
	if !h.config.UseSkipList {
		return nil
	}
	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö (–∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é) –ø—É—Ç–µ–π –∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	h.mutex.RLock()
	damagedSnapshot := make([]DamagedFileInfo, len(h.damagedFiles))
	copy(damagedSnapshot, h.damagedFiles)
	h.mutex.RUnlock()

	if len(damagedSnapshot) == 0 {
		return nil
	}

	// –û—Ç–∫—Ä–æ–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ append
	file, err := os.OpenFile(h.config.SkipListFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	writer := bufio.NewWriter(file)
	sessionWritten := make(map[string]bool)

	for _, info := range damagedSnapshot {
		norm := h.normalizePath(info.FilePath)
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∏–ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
		if h.persistedSkipSet[norm] || sessionWritten[norm] {
			continue
		}
		if _, err := fmt.Fprintf(writer, "%s\n", norm); err != nil {
			return err
		}
		sessionWritten[norm] = true
	}

	if err := writer.Flush(); err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º persistedSkipSet –Ω–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
	h.mutex.Lock()
	for norm := range sessionWritten {
		h.persistedSkipSet[norm] = true
		h.skipSet[norm] = true
	}
	h.mutex.Unlock()
	return nil
}

// openLogFile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
// openLogFile removed: damaged_files.log is no longer used

// ShouldSkipFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
func (h *DamagedDiskHandler) ShouldSkipFile(filePath string) bool {
	if !h.config.UseSkipList {
		return false
	}
	
	h.mutex.RLock()
	defer h.mutex.RUnlock()
	
	return h.skipSet[h.normalizePath(filePath)]
}

// LogDamagedFile –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
func (h *DamagedDiskHandler) LogDamagedFile(filePath, reason string, size int64, attemptNum int, errorDetail string) {
	info := DamagedFileInfo{
		FilePath:    filePath,
		Reason:      reason,
		Timestamp:   time.Now(),
		Size:        size,
		AttemptNum:  attemptNum,
		ErrorDetail: errorDetail,
	}
    
	// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏ –∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ) –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ skip_files.list –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	h.mutex.Lock()
	h.damagedFiles = append(h.damagedFiles, info)
	norm := h.normalizePath(filePath)
	h.skipSet[norm] = true
	if h.config.UseSkipList && !h.persistedSkipSet[norm] {
		if f, err := os.OpenFile(h.config.SkipListFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644); err == nil {
			// –ö–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
			fmt.Fprintf(f, "%s\n", norm)
			f.Close()
			h.persistedSkipSet[norm] = true
		} else {
			fmt.Printf("Warning: failed to append to skip list: %v\n", err)
		}
	}
	h.mutex.Unlock()
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
	h.mutex.Lock()
	h.sessionSkippedCount++
	h.sessionLastSkipped = filePath
	sc := h.sessionSkippedCount
	ls := h.sessionLastSkipped
	h.mutex.Unlock()

	// –í—ã–≤–æ–¥–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
	if !h.config.Quiet {
		fmt.Printf("‚ö†Ô∏è SKIPPED: %s (%s) | session: %d, last: %s\n", filePath, reason, sc, ls)
	}
	
	// damaged_files.log disabled; rely on skip_files.list and console output only
}

// GetDamagedStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
func (h *DamagedDiskHandler) GetDamagedStats() (int, int64) {
	h.mutex.RLock()
	defer h.mutex.RUnlock()
	
	count := len(h.damagedFiles)
	var totalSize int64
	
	for _, info := range h.damagedFiles {
		totalSize += info.Size
	}
	
	return count, totalSize
}

// GetSkippedStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
func (h *DamagedDiskHandler) GetSkippedStats() int {
	h.mutex.RLock()
	defer h.mutex.RUnlock()
	
	return len(h.skipSet)
}

// CopyFileWithDamageHandling –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (h *DamagedDiskHandler) CopyFileWithDamageHandling(sourcePath, targetPath string, sourceInfo os.FileInfo, progress interface{}) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
	if h.ShouldSkipFile(sourcePath) {
		fmt.Printf("üìã Skipping previously damaged file: %s\n", sourcePath)
		return nil
	}
	
	// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if err := os.MkdirAll(filepath.Dir(targetPath), 0755); err != nil {
		return fmt.Errorf("failed to create target directory: %v", err)
	}
	
	// –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	for attempt := 1; attempt <= h.config.RetryCount; attempt++ {
	err := h.copyFileWithTimeoutAndProgress(sourcePath, targetPath, sourceInfo, attempt, progress)
		
		if err == nil {
			// –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏
			return nil
		}
		
		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
		errorStr := err.Error()
		var reason string
		
		if strings.Contains(errorStr, "timeout") || strings.Contains(errorStr, "context deadline exceeded") {
			reason = "timeout"
		} else if strings.Contains(errorStr, "I/O error") || strings.Contains(errorStr, "read error") {
			reason = "I/O error"
		} else if strings.Contains(errorStr, "device hardware error") {
			reason = "hardware error"
		} else if strings.Contains(errorStr, "bad sector") {
			reason = "bad sector"
		} else {
			reason = "read error"
		}
		
		// –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π
		if strings.Contains(errorStr, "interrupted by user") {
			return fmt.Errorf("operation interrupted by user")
		}

		// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π
		if attempt >= h.config.RetryCount {
			h.LogDamagedFile(sourcePath, reason, sourceInfo.Size(), attempt, errorStr)
			return nil // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
		}
		
		fmt.Printf("üîÑ Retry %d/%d for %s (reason: %s)\n", attempt, h.config.RetryCount, sourcePath, reason)
		time.Sleep(1 * time.Second) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
	}
	
	return nil
}

// copyFileWithTimeoutAndProgress –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (h *DamagedDiskHandler) copyFileWithTimeoutAndProgress(sourcePath, targetPath string, sourceInfo os.FileInfo, attemptNum int, externalProgress interface{}) error {
	// Derive from global interrupt context if available to support Ctrl+C
	parentCtx := context.Background()
	if globalInterruptHandler != nil {
		parentCtx = globalInterruptHandler.Context()
	}
	ctx, cancel := context.WithCancel(parentCtx)
	defer cancel()
	
	// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
	done := make(chan error, 1)
	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
	progressChan := make(chan int64, 1)
	
	go func() {
		done <- h.copyFileInternalWithProgress(ctx, sourcePath, targetPath, sourceInfo, progressChan, externalProgress)
	}()
	
	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç–∞–π–º–∞—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	lastProgressTime := time.Now()
	var lastBytesRead int64 = 0
	
	ticker := time.NewTicker(1 * time.Second) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	defer ticker.Stop()
	
	for {
		select {
		case err := <-done:
			// If cancelled due to interrupt, return a specific error
			if err != nil && ctx.Err() != nil && time.Since(lastProgressTime) <= h.config.FileTimeout {
				return fmt.Errorf("operation interrupted by user")
			}
			return err
		case bytesRead := <-progressChan:
			// –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á—Ç–µ–Ω–∏—è
			if bytesRead > lastBytesRead {
				lastProgressTime = time.Now()
				lastBytesRead = bytesRead
			}
		case <-ticker.C:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			if time.Since(lastProgressTime) > h.config.FileTimeout {
				cancel() // –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
				return fmt.Errorf("file copy timeout after %v without progress (attempt %d)", h.config.FileTimeout, attemptNum)
			}
		}
	}
}

// copyFileWithTimeout –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
func (h *DamagedDiskHandler) copyFileWithTimeout(sourcePath, targetPath string, sourceInfo os.FileInfo, attemptNum int) error {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	
	// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
	done := make(chan error, 1)
	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
	progressChan := make(chan int64, 1)
	
	go func() {
		done <- h.copyFileInternalWithProgress(ctx, sourcePath, targetPath, sourceInfo, progressChan, nil)
	}()
	
	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —Ç–∞–π–º–∞—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	lastProgressTime := time.Now()
	var lastBytesRead int64 = 0
	
	ticker := time.NewTicker(1 * time.Second) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	defer ticker.Stop()
	
	for {
		select {
		case err := <-done:
			return err
		case bytesRead := <-progressChan:
			// –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á—Ç–µ–Ω–∏—è
			if bytesRead > lastBytesRead {
				lastProgressTime = time.Now()
				lastBytesRead = bytesRead
			}
		case <-ticker.C:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			if time.Since(lastProgressTime) > h.config.FileTimeout {
				cancel() // –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
				return fmt.Errorf("file copy timeout after %v without progress (attempt %d)", h.config.FileTimeout, attemptNum)
			}
		}
	}
}

// copyFileInternalWithProgress –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (h *DamagedDiskHandler) copyFileInternalWithProgress(ctx context.Context, sourcePath, targetPath string, sourceInfo os.FileInfo, progressChan chan<- int64, externalProgress interface{}) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
	sourceFile, err := os.Open(sourcePath)
	if err != nil {
		return fmt.Errorf("failed to open source file: %v", err)
	}
	defer sourceFile.Close()
	
	// –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
	targetFile, err := os.Create(targetPath)
	if err != nil {
		return fmt.Errorf("failed to create target file: %v", err)
	}
	defer targetFile.Close()

	// Unblock stuck Read/Write on cancellation by closing files when context is done
	cancelOnce := sync.Once{}
	go func() {
		<-ctx.Done()
		cancelOnce.Do(func() {
			sourceFile.Close()
			targetFile.Close()
		})
	}()
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	buffer := make([]byte, h.config.BufferSize)
	var totalBytesRead int64 = 0
	
	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		
		n, readErr := sourceFile.Read(buffer)
		if n > 0 {
			totalBytesRead += int64(n)
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
			select {
			case progressChan <- totalBytesRead:
			default:
			}
			
			// –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
			if externalProgress != nil {
				if fastProgress, ok := externalProgress.(*FastCopyProgress); ok {
					fastProgress.setCurrentFileProgress(sourcePath, sourceInfo.Size(), totalBytesRead)
				}
			}
			
			if _, writeErr := targetFile.Write(buffer[:n]); writeErr != nil {
				return fmt.Errorf("failed to write to target file: %v", writeErr)
			}
		}
		
		if readErr == io.EOF {
			break
		}
		
		if readErr != nil {
			return fmt.Errorf("failed to read from source file: %v", readErr)
		}
	}
	
	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
	if err := targetFile.Sync(); err != nil {
		return fmt.Errorf("failed to sync target file: %v", err)
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
	if err := os.Chmod(targetPath, sourceInfo.Mode()); err != nil {
		// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º
		fmt.Printf("Warning: failed to set file permissions: %v\n", err)
	}
	
	return nil
}

// copyFileInternal –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (h *DamagedDiskHandler) copyFileInternal(sourcePath, targetPath string, sourceInfo os.FileInfo) error {
	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressChan := make(chan int64, 1)
	return h.copyFileInternalWithProgress(context.Background(), sourcePath, targetPath, sourceInfo, progressChan, nil)
}

// normalizePath –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è Windows/Unix (–∫–µ–π—Å –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
func (h *DamagedDiskHandler) normalizePath(p string) string {
	if p == "" {
		return p
	}
	abs := p
	if ap, err := filepath.Abs(p); err == nil {
		abs = ap
	}
	clean := filepath.Clean(abs)
	if runtime.GOOS == "windows" {
		return strings.ToLower(clean)
	}
	return clean
}

// PrintSummary –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
func (h *DamagedDiskHandler) PrintSummary() {
	damagedCount, damagedSize := h.GetDamagedStats()
	skippedCount := h.GetSkippedStats()
	
	if damagedCount == 0 && skippedCount == 0 {
		fmt.Printf("‚úÖ All files processed successfully - no damaged files found\n")
		return
	}
	
	fmt.Printf("\n" + strings.Repeat("=", 60) + "\n")
	fmt.Printf("üìä DAMAGED DISK COPY SUMMARY\n")
	fmt.Printf(strings.Repeat("=", 60) + "\n")
	
	if skippedCount > damagedCount {
		fmt.Printf("üìã Previously damaged files (skipped): %d\n", skippedCount-damagedCount)
	}
	
	if damagedCount > 0 {
		fmt.Printf("‚ö†Ô∏è Newly damaged files found: %d\n", damagedCount)
		fmt.Printf("üíΩ Total size of damaged files: %s\n", formatDiskFileSize(damagedSize))
		fmt.Printf("üìã Skip list updated: %s\n", h.config.SkipListFile)
	}
	
	fmt.Printf("\nüí° RECOMMENDATIONS:\n")
	if damagedCount > 0 {
		fmt.Printf("‚Ä¢ Check disk health with disk diagnostic tools\n")
		fmt.Printf("‚Ä¢ Consider running next copy with longer timeout (currently %v)\n", h.config.FileTimeout)
		fmt.Printf("‚Ä¢ Review damaged files list to determine if they're critical\n")
		fmt.Printf("‚Ä¢ Next copy will automatically skip these damaged files\n")
	}
	if skippedCount > 0 {
		fmt.Printf("‚Ä¢ To retry previously damaged files, delete: %s\n", h.config.SkipListFile)
		fmt.Printf("‚Ä¢ Or manually edit the skip list to remove specific files\n")
	}
	fmt.Printf(strings.Repeat("=", 60) + "\n")
}

// formatDiskFileSize —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¥–∏—Å–∫–∞
func formatDiskFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
